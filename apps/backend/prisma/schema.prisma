generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  username  String    @db.VarChar(255)
  phone     Int       @unique
  address   String    @db.VarChar(255)
  password  String    @db.VarChar(255)
  verified  DateTime?

  services Service[]
  Command  Command[]
  Customer Customer[]
}

model Customer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  phone     Int      @unique
  address   String?  @db.VarChar(255)
  userId    Int

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  commands Command[]
}

model Service {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions ServiceVersion[]
}

// ServiceVersion is the version (an update) of the service: it is created when user updates the service
model ServiceVersion {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  label       String
  price       Int
  description String?
  serviceId   Int
  service     Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  commands    ServiceOnCommand[]
}

model Command {
  id           Int      @id @default(autoincrement())
  code         String   @unique @db.VarChar(36)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  price        Int
  description  String?  @db.VarChar(255)
  discount     Int?
  customerId   Int
  userId       Int
  withdrawDate DateTime

  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  services ServiceOnCommand[]
  invoices Invoice[]
}

model ServiceOnCommand {
  quantity  Int
  serviceId Int
  commandId Int

  service ServiceVersion @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  command Command        @relation(fields: [commandId], references: [id], onDelete: Cascade)

  @@id([serviceId, commandId])
}

model Invoice {
  id        Int      @id @default(autoincrement())
  code      String   @unique @db.VarChar(36)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  commandId Int
  advance   Int
  command   Command  @relation(fields: [commandId], references: [id])
}
