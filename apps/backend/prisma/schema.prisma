generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  username  String    @db.VarChar(255)
  phone     String    @unique
  address   String    @db.VarChar(255)
  password  String    @db.VarChar(255)
  verified  DateTime?

  services     Service[]
  Command      Command[]
  Customer     Customer[]
  IncomesStats IncomesStats[]
}

model Customer {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  phone     String   @unique
  address   String?  @db.VarChar(255)
  userId    Int

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  commands Command[]
}

model Service {
  id               Int              @id @default(autoincrement())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  userId           Int
  currentVersionId Int
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  versions         ServiceVersion[]
}

// ServiceVersion is the version (an update) of the service: it is created when user updates the service
model ServiceVersion {
  id          Int                @id @default(autoincrement())
  createdAt   DateTime           @default(now())
  label       String
  price       Int
  description String?
  serviceId   Int
  service     Service            @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  commands    ServiceOnCommand[]
}

model Command {
  id           Int           @id @default(autoincrement())
  code         String?       @unique @db.VarChar(36)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  price        Int
  description  String?       @db.VarChar(255)
  discount     Int           @default(0)
  customerId   Int
  userId       Int
  withdrawDate DateTime
  advance      Int           @default(0)
  status       CommandStatus @default(NOT_PAID)

  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  customer Customer           @relation(fields: [customerId], references: [id], onDelete: Cascade)
  services ServiceOnCommand[]
  invoices Invoice[]
  Incomes  Incomes[]
}

model ServiceOnCommand {
  quantity  Int
  serviceId Int
  commandId Int

  service ServiceVersion @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  command Command        @relation(fields: [commandId], references: [id], onDelete: Cascade)

  @@id([serviceId, commandId])
}

model Invoice {
  id         Int      @id @default(autoincrement())
  code       String?  @unique @db.VarChar(36)
  fileName   String?  @unique @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  commandId  Int
  amountPaid Int      @default(0)
  command    Command  @relation(fields: [commandId], references: [id], onDelete: Cascade)
}

model IncomesStats {
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  day       String
  amount    Int
  accountId Int
  incomes   Incomes[]
  user      User      @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@id(name: "incomeId", [day, accountId])
}

model Incomes {
  id                    Int           @id @default(autoincrement())
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  commandId             Int
  amount                Int
  command               Command       @relation(fields: [commandId], references: [id], onDelete: Cascade)
  IncomesStats          IncomesStats? @relation(fields: [incomesStatsDay, incomesStatsAccountId], references: [day, accountId])
  incomesStatsDay       String?
  incomesStatsAccountId Int?
}

enum CommandStatus {
  PENDING
  PAID
  NOT_PAID
}
